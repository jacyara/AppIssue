"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var util_1 = require("../Calendar/util");
var FocusManagerContainer_1 = require("../FocusManagerContainer");
var Popper_1 = require("../Popper");
var CalendarPopup_1 = require("./CalendarPopup");
var DateInput_1 = require("./DateInput");
function DatePickerInput(props) {
    var inputRef = react_1.useRef();
    var controller = react_1.useRef();
    var setController = function (ctrl) {
        controller.current = ctrl;
    };
    var handleDayClick = function (ctrl) { return function (day) {
        inputRef.current.focus();
        ctrl.hide();
        return props.onChange(day);
    }; };
    var handleInputClick = function (ctrl) { return function (e) {
        ctrl.show();
        return props.onClick(e);
    }; };
    var handleInputFocus = function (ctrl) { return function (e) {
        ctrl.show();
        return props.onFocus(e);
    }; };
    var handleFocusIn = function () {
        if (controller.current) {
            controller.current.show();
        }
    };
    var handleFocusOut = function () {
        if (controller.current) {
            controller.current.hide();
        }
    };
    var renderTarget = function (ctrl) {
        var calendarProps = props.calendarProps, minDate = props.minDate, maxDate = props.maxDate, rest = __rest(props, ["calendarProps", "minDate", "maxDate"]);
        return (react_1.default.createElement(DateInput_1.DateInput, __assign({ icon: 'calendarOutline', onIconClick: ctrl.show }, rest, { inputRef: inputRef, onClick: handleInputClick(ctrl), onFocus: handleInputFocus(ctrl) })));
    };
    var value = props.value;
    return (react_1.default.createElement(FocusManagerContainer_1.FocusManagerContainer, { onFocusIn: handleFocusIn, onFocusOut: handleFocusOut },
        react_1.default.createElement(Popper_1.Popper, { control: setController, renderTarget: renderTarget, placement: 'bottom-start', block: true }, function (ctrl) { return (react_1.default.createElement(CalendarPopup_1.CalendarPopup, __assign({ key: value && value.getTime(), initialVisibleDate: value || new Date(), onDayClick: handleDayClick(ctrl), modifiers: {
                selected: function (day) { return value && util_1.isSameDay(day, value); },
                disabled: exports.disableByRange(props.minDate, props.maxDate),
            } }, props.calendarProps))); })));
}
exports.DatePickerInput = DatePickerInput;
DatePickerInput.defaultProps = {
    onChange: function () { return null; },
    onFocus: function () { return null; },
    onClick: function () { return null; },
};
exports.disableByRange = function (minDate, maxDate) {
    var realMinDate = new Date(minDate);
    realMinDate.setHours(0, 0, 0, 0);
    var realMaxDate = new Date(maxDate);
    realMaxDate.setHours(23, 59, 59, 999);
    return function (day) {
        return (minDate && day < realMinDate) || (maxDate && day > realMaxDate);
    };
};
//# sourceMappingURL=DatePickerInput.js.map