"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var styles_1 = require("../../styles");
var locale_1 = require("../../util/locale");
var util_1 = require("./util");
function MonthView(props) {
    var visibleDate = props.visibleDate, renderDay = props.renderDay, renderWeekName = props.renderWeekName, createDayStyles = props.createDayStyles, onDayClick = props.onDayClick, onDayHover = props.onDayHover;
    var month = util_1.createMonthMatrix(visibleDate);
    var _a = styles_1.useStyles(exports.createStyles), classes = _a.classes, css = _a.css;
    var handleDayClick = function (day) { return function () { return onDayClick(day); }; };
    var handleDayHover = function (day) { return function () { return onDayHover(day); }; };
    return (react_1.default.createElement("table", { className: classes.table },
        react_1.default.createElement("thead", null,
            react_1.default.createElement("tr", null, month[0].map(function (day, d) { return (react_1.default.createElement("th", { key: d }, renderWeekName(day))); }))),
        react_1.default.createElement("tbody", null, month.map(function (week, w) { return (react_1.default.createElement("tr", { key: w }, week.map(function (day, d) { return (react_1.default.createElement("td", { key: d, "data-date": day.toISOString().slice(0, 10) },
            react_1.default.createElement("span", { className: css(classes.day, createDayStyles(day, props)), onClick: handleDayClick(day), onMouseOver: handleDayHover(day), role: 'button' }, renderDay(day)))); }))); }))));
}
exports.MonthView = MonthView;
MonthView.defaultProps = {
    visibleDate: new Date(),
    onDayClick: function () { return null; },
    onDayHover: function () { return null; },
    renderDay: function (day) {
        var dayFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { day: '2-digit' });
        return dayFormatter.format(day);
    },
    renderWeekName: function (firstWeekDay) {
        var weekFormatter = new Intl.DateTimeFormat(locale_1.getUserLocale(), { weekday: 'narrow' });
        return weekFormatter.format(firstWeekDay);
    },
    createDayStyles: function () { return null; },
};
exports.createStyles = function (theme) { return ({
    table: {
        borderCollapse: 'collapse',
        textAlign: 'center',
        lineHeight: '1.5rem',
        width: '100%',
        th: {
            width: '2rem',
            padding: '0.25rem 0',
        },
    },
    day: {
        width: '2rem',
        padding: '0.25rem 0',
        display: 'inline-block',
        borderRadius: '50%',
        ':hover': {
            cursor: 'pointer',
            background: theme.pallete.surface.background,
        },
    },
    active: {
        background: theme.pallete.primary.main,
        color: theme.pallete.surface.main,
    },
}); };
//# sourceMappingURL=MonthView.js.map