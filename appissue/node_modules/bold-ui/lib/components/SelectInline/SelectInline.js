"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var react_1 = require("../../util/react");
var Button_1 = require("../Button");
var Icon_1 = require("../Icon");
var Popper_1 = require("../Popper");
var Select_1 = require("../Select/Select");
var Text_1 = require("../Text");
function SelectInline(props) {
    var value = props.value, onChange = props.onChange, itemToString = props.itemToString, buttonProps = props.buttonProps, popperProps = props.popperProps, defaultButtonText = props.defaultButtonText, rest = __rest(props, ["value", "onChange", "itemToString", "buttonProps", "popperProps", "defaultButtonText"]);
    var theme = styles_1.useTheme();
    var targetButtonRef = React.useRef();
    var selectInputRef = React.useRef();
    var renderTarget = function (ctrl) {
        var _a = buttonProps || {}, innerRef = _a.innerRef, buttonRest = __rest(_a, ["innerRef"]);
        return (React.createElement(Button_1.Button, __assign({ onClick: ctrl.toggle, skin: 'ghost', kind: 'normal', size: 'small', innerRef: react_1.composeRefs(targetButtonRef, innerRef) }, buttonRest),
            React.createElement(Text_1.Text, null, itemToString(value) || defaultButtonText),
            React.createElement(Icon_1.Icon, { style: { marginLeft: '0.5rem' }, icon: ctrl.isShown() ? 'angleUp' : 'angleDown' })));
    };
    var styles = {
        box: {
            border: "1px solid " + theme.pallete.divider,
            backgroundColor: theme.pallete.surface.main,
            '& > div:first-of-type': {
                padding: '0.5rem',
            },
            'ul > li:first-of-type': {
                borderTop: "1px solid " + theme.pallete.divider,
            },
            'div > ul': {
                position: 'static',
                boxShadow: 'none',
                border: 'none',
                borderRadius: 0,
            },
        },
        popper: {
            '[data-visible]': {
                boxShadow: theme.shadows.outer['40'],
            },
        },
    };
    var handleVisibilityEvents = function (ref) { return function (ctrl) {
        setTimeout(function () {
            if (ref.current) {
                ref.current.focus();
            }
        });
    }; };
    return (React.createElement(Popper_1.Popper, __assign({ renderTarget: renderTarget, placement: 'bottom-end', style: styles.popper, onHide: handleVisibilityEvents(targetButtonRef), onShow: handleVisibilityEvents(selectInputRef) }, popperProps), function (ctrl) {
        var handleOnChange = function (newValue) {
            onChange && onChange(newValue);
            ctrl.hide();
        };
        return (React.createElement(Select_1.Select, __assign({}, rest, { itemToString: itemToString, onChange: handleOnChange, style: styles.box, inputRef: selectInputRef, isOpen: true })));
    }));
}
exports.SelectInline = SelectInline;
//# sourceMappingURL=SelectInline.js.map