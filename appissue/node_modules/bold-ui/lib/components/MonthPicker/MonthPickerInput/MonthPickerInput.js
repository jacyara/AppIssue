"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var createAutoCorrectedDatePipe_1 = __importDefault(require("text-mask-addons/dist/createAutoCorrectedDatePipe"));
var MaskedTextField_1 = require("../../MaskedTextField");
var Popper_1 = require("../../Popper");
var MonthPicker_1 = require("../MonthPicker/MonthPicker");
var MonthPickerInput = /** @class */ (function (_super) {
    __extends(MonthPickerInput, _super);
    function MonthPickerInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderInput = function (ctrl) {
            var _a = _this.props, onChange = _a.onChange, value = _a.value, rest = __rest(_a, ["onChange", "value"]);
            return (react_1.default.createElement(MonthInput, __assign({ onFocus: ctrl.show, onChange: _this.onInputChange, value: exports.format(value), onIconClick: ctrl.toggle, icon: 'calendarOutline' }, rest)));
        };
        _this.onValueChange = function (ctrl) { return function (referenceMonth) {
            ctrl.hide();
            _this.props.onChange(referenceMonth);
        }; };
        _this.onInputChange = function (e) {
            if (e && e.target && e.target.value) {
                var value = e.target.value;
                if (exports.isValidInput(value)) {
                    _this.props.onChange({ month: +value.substr(0, 2) - 1, year: +value.substr(3) });
                }
            }
            else {
                _this.props.onChange(null);
            }
        };
        return _this;
    }
    MonthPickerInput.prototype.render = function () {
        var _this = this;
        var value = this.props.value;
        return (react_1.default.createElement(Popper_1.Popper, { renderTarget: this.renderInput, placement: 'bottom-start', closeOnOutsideClick: true, block: true }, function (ctrl) { return (react_1.default.createElement(MonthPicker_1.MonthPicker, { month: value && value.month, year: value && value.year, onChange: _this.onValueChange(ctrl) })); }));
    };
    return MonthPickerInput;
}(react_1.default.PureComponent));
exports.MonthPickerInput = MonthPickerInput;
var MonthInput = function (props) {
    return (react_1.default.createElement(MaskedTextField_1.MaskedTextField, __assign({ mask: [/\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/], pipe: createAutoCorrectedDatePipe_1.default('mm/yyyy'), placeholder: 'mm/yyyy' }, props)));
};
exports.format = function (value) {
    if (!value || !value.year || value.month == null) {
        return null;
    }
    if (value.month < 9) {
        return "0" + (value.month + 1) + "/" + value.year;
    }
    else {
        return value.month + 1 + "/" + value.year;
    }
};
exports.isValidInput = function (value) {
    return /\d\d\/\d\d\d\d/.test(value);
};
//# sourceMappingURL=MonthPickerInput.js.map