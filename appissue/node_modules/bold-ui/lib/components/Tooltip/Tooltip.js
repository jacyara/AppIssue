"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_popper_1 = require("react-popper");
var styles_1 = require("../../styles");
var string_1 = require("../../util/string");
var Portal_1 = require("../Portal");
var RootRef_1 = require("../RootRef");
var FadeTransition_1 = require("../Transition/FadeTransition");
var TooltipPopper_1 = require("./TooltipPopper");
function Tooltip(props) {
    var text = props.text, children = props.children, offset = props.offset, externalStyle = props.style, container = props.container, rest = __rest(props, ["text", "children", "offset", "style", "container"]);
    var child = react_1.default.Children.only(children);
    var theme = styles_1.useTheme();
    var tooltipIdRef = react_1.default.useRef(null);
    react_1.default.useEffect(function () {
        tooltipIdRef.current = "tooltip-" + string_1.randomStr();
    }, []);
    var _a = react_1.default.useState(false), visible = _a[0], setVisible = _a[1];
    var handleMouseEnter = function (e) {
        setVisible(true);
        child.props.onMouseEnter && child.props.onMouseEnter(e);
    };
    var handleMouseLeave = function (e) {
        setVisible(false);
        child.props.onMouseLeave && child.props.onMouseLeave(e);
    };
    var handleFocus = function (e) {
        setVisible(true);
        child.props.onFocus && child.props.onFocus(e);
    };
    var handleBlur = function (e) {
        setVisible(false);
        child.props.onBlur && child.props.onBlur(e);
    };
    if (!text) {
        return child;
    }
    return (react_1.default.createElement(react_popper_1.Manager, null,
        react_1.default.createElement(react_popper_1.Reference, null, function (_a) {
            var ref = _a.ref;
            return (react_1.default.createElement(RootRef_1.RootRef, { rootRef: ref }, react_1.default.cloneElement(child, {
                'aria-describedby': visible ? tooltipIdRef.current : undefined,
                onMouseEnter: handleMouseEnter,
                onMouseLeave: handleMouseLeave,
                onFocus: handleFocus,
                onBlur: handleBlur,
            })));
        }),
        react_1.default.createElement(FadeTransition_1.FadeTransition, { in: visible }, function (_a) {
            var className = _a.className;
            return visible && (react_1.default.createElement(Portal_1.Portal, { container: container },
                react_1.default.createElement(react_popper_1.Popper, __assign({ modifiers: {
                        offset: { offset: "0, " + theme.typography.sizes.html * offset },
                        preventOverflow: {
                            boundariesElement: 'window',
                        },
                    } }, rest), function (_a) {
                    var ref = _a.ref, style = _a.style, placement = _a.placement;
                    return (react_1.default.createElement("div", { id: tooltipIdRef.current, ref: ref, className: className, role: 'tooltip', style: __assign({}, style, { zIndex: theme.zIndex.tooltip }), "data-placement": placement },
                        react_1.default.createElement(TooltipPopper_1.TooltipPopper, { text: text, style: externalStyle })));
                })));
        })));
}
exports.Tooltip = Tooltip;
Tooltip.defaultProps = {
    placement: 'top',
    offset: 0.25,
};
//# sourceMappingURL=Tooltip.js.map