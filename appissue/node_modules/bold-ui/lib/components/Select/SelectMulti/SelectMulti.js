"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var useFormControl_1 = require("../../../hooks/useFormControl");
var Checkbox_1 = require("../../Checkbox/Checkbox");
var Flow_1 = require("../../Flow");
var FormControl_1 = require("../../FormControl");
var SelectDownshiftMenu_1 = require("../SelectSingle/SelectDownshiftMenu");
var MultiDownshift_1 = require("./MultiDownshift");
var SelectMultiInput_1 = require("./SelectMultiInput");
function SelectMulti(props) {
    var _this = this;
    var value = props.value, items = props.items, itemToString = props.itemToString, onChange = props.onChange, isOpen = props.isOpen, itemIsEqual = props.itemIsEqual, onFilterChange = props.onFilterChange, loading = props.loading, externalRenderItem = props.renderItem, components = props.components, placeholder = props.placeholder, label = props.label, error = props.error, rest = __rest(props, ["value", "items", "itemToString", "onChange", "isOpen", "itemIsEqual", "onFilterChange", "loading", "renderItem", "components", "placeholder", "label", "error"]);
    var handleItemRemove = function (removeItem) { return function (item) { return removeItem(item); }; };
    var renderItem = function (_a) {
        var isSelected = _a.isSelected;
        return function (item) { return (react_1.default.createElement(Flow_1.HFlow, { hSpacing: 0.5 },
            react_1.default.createElement(Checkbox_1.Checkbox, { checked: isSelected(item), tabIndex: -1, readOnly: true }),
            externalRenderItem ? externalRenderItem(item) : itemToString(item))); };
    };
    //   const handleInputIconClick = ({ toggleMenu }: MultiSelectRenderProps<T>) => () => toggleMenu()
    var handleInputFocus = function (_a) {
        var openMenu = _a.openMenu;
        return function () { return openMenu(); };
    };
    var handleInputClick = function (_a) {
        var openMenu = _a.openMenu;
        return function () { return openMenu(); };
    };
    var handleInputBlur = function (_a) {
        var closeMenu = _a.closeMenu;
        return function (e) {
            closeMenu();
            _this.props.onBlur && _this.props.onBlur(e);
        };
    };
    var _a = useFormControl_1.useFormControl(props), getFormControlProps = _a.getFormControlProps, getFormControlInputProps = _a.getInputProps;
    var formControlProps = getFormControlProps();
    var inputProps = getFormControlInputProps();
    var invalid = inputProps['aria-invalid'];
    return (react_1.default.createElement(FormControl_1.FormControl, __assign({}, formControlProps),
        react_1.default.createElement(MultiDownshift_1.MultiDownshift, { selectedItems: value || [], items: items, itemToString: itemToString, onChange: onChange, isOpen: isOpen, itemIsEqual: itemIsEqual, onFilterChange: onFilterChange, labelId: formControlProps.labelId }, function (downshift) {
            var 
            // isOpen,
            getInputProps = downshift.getInputProps, selectedItems = downshift.selectedItems, removeItem = downshift.removeItem, inputValue = downshift.inputValue, visibleItems = downshift.visibleItems;
            return (react_1.default.createElement("div", null,
                react_1.default.createElement(SelectMultiInput_1.SelectMultiInput, __assign({ items: selectedItems }, rest, { placeholder: !selectedItems || selectedItems.length === 0 ? placeholder : undefined, onBlur: handleInputBlur(downshift), onFocus: handleInputFocus(downshift), onClick: handleInputClick(downshift), onRemoveItem: handleItemRemove(removeItem), renderItem: itemToString }, getInputProps(), inputProps, { value: inputValue ? inputValue : '', invalid: invalid })),
                react_1.default.createElement(SelectDownshiftMenu_1.SelectDownshiftMenu, { downshift: downshift, items: visibleItems, loading: loading, renderItem: renderItem(downshift) })));
        })));
}
exports.SelectMulti = SelectMulti;
//# sourceMappingURL=SelectMulti.js.map