"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var addon_actions_1 = require("@storybook/addon-actions");
var addon_knobs_1 = require("@storybook/addon-knobs");
var react_1 = require("@storybook/react");
var react_2 = __importDefault(require("react"));
var _1 = require("./");
var fruits = [
    { value: 1, label: 'Apple' },
    { value: 2, label: 'Avocado' },
    { value: 3, label: 'Banana' },
    { value: 4, label: 'Blueberry' },
    { value: 5, label: 'Coconut' },
    { value: 6, label: 'Grape' },
    { value: 7, label: 'Lemon' },
    { value: 8, label: 'Mango' },
    { value: 9, label: 'Melon' },
    { value: 10, label: 'Orange' },
    { value: 11, label: 'Peach' },
    { value: 12, label: 'Pear' },
];
var loadFruits = function (query) {
    return new Promise(function (resolve) {
        setTimeout(function () { return resolve(_1.defaultSelectFilter(fruits.slice(), query, function (item) { return item.label; })); }, 1000);
    });
};
var SelectAsyncManager = function (props) {
    var _a = react_2.default.useState(false), loading = _a[0], setLoading = _a[1];
    var _b = react_2.default.useState([]), items = _b[0], setItems = _b[1];
    var loadItems = function (query) {
        setLoading(true);
        loadFruits(query)
            .then(function (data) {
            setItems(data);
            setLoading(false);
        })
            .catch(function (err) { return setLoading(false); });
    };
    return props.children({
        items: items,
        loading: loading,
        loadItems: loadItems,
    });
};
// tslint:disable jsx-no-lambda
react_1.storiesOf('Components|Select', module)
    .add('default', function () { return (react_2.default.createElement(_1.Select, { label: 'Fruit', name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), itemToString: function (item) { return item && item.label; }, itemIsEqual: function (a, b) { return a.value === b.value; }, placeholder: 'Select a value...', multiple: addon_knobs_1.boolean('multiple', false), clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), loading: addon_knobs_1.boolean('loading', false), onChange: addon_actions_1.action('changed'), onBlur: addon_actions_1.action('blur') })); })
    .add('custom menu item', function () { return (react_2.default.createElement(_1.Select, { renderItem: function (item) { return (react_2.default.createElement(react_2.default.Fragment, null,
        react_2.default.createElement("p", null,
            react_2.default.createElement("strong", null, item.label)),
        react_2.default.createElement("p", null, "yummy"))); }, label: 'Fruit', name: 'fruit', items: fruits, error: addon_knobs_1.text('error', ''), itemToString: function (item) { return item && item.label; }, itemIsEqual: function (a, b) { return a.value === b.value; }, placeholder: 'Select a value...', multiple: addon_knobs_1.boolean('multiple', false), clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), loading: addon_knobs_1.boolean('loading', false), onChange: addon_actions_1.action('changed'), onBlur: addon_actions_1.action('blur') })); })
    .add('async items', function () { return (react_2.default.createElement(SelectAsyncManager, null, function (_a) {
    var items = _a.items, loading = _a.loading, loadItems = _a.loadItems;
    return (react_2.default.createElement(_1.Select, { label: 'Repository', name: 'repository', items: items, error: addon_knobs_1.text('error', ''), itemToString: function (item) { return item && item.label; }, itemIsEqual: function (a, b) { return a.value === b.value; }, placeholder: 'Select a value...', multiple: addon_knobs_1.boolean('multiple', false), clearable: addon_knobs_1.boolean('clearable', true), disabled: addon_knobs_1.boolean('disabled', false), loading: loading, onChange: addon_actions_1.action('changed'), onBlur: addon_actions_1.action('blur'), onFilterChange: loadItems }));
})); })
    .add('select menu', function () { return (react_2.default.createElement(_1.SelectMenu, { style: { position: 'static' } },
    react_2.default.createElement(_1.SelectMenuItem, null, "Item 1"),
    react_2.default.createElement(_1.SelectMenuItem, { selected: true }, "Item 2 (selected)"),
    react_2.default.createElement(_1.SelectMenuItem, null, "Item 3"),
    react_2.default.createElement(_1.SelectMenuItem, null, "Item 4"),
    react_2.default.createElement(_1.SelectMenuItem, null, "Item 5"))); });
//# sourceMappingURL=Select.stories.js.map