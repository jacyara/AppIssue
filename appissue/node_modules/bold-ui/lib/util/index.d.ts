export * from './Observable';
export * from './types';
export declare const isEmpty: (value?: any) => boolean;
export declare const isEqual: (value: any, other: any) => boolean;
export declare const merge: {
    <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
    <TObject, TSource1, TSource2>(object: TObject, source1: TSource1, source2: TSource2): TObject & TSource1 & TSource2;
    <TObject, TSource1, TSource2, TSource3>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3): TObject & TSource1 & TSource2 & TSource3;
    <TObject, TSource1, TSource2, TSource3, TSource4>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3, source4: TSource4): TObject & TSource1 & TSource2 & TSource3 & TSource4;
    (object: any, ...otherArgs: any[]): any;
};
export declare const some: {
    <T>(collection: ArrayLike<T>, predicate?: import("lodash").ListIterateeCustom<T, boolean>): boolean;
    <T extends object>(collection: T, predicate?: import("lodash").ObjectIterateeCustom<T, boolean>): boolean;
};
/**
 * Check whether the object is a promise.
 */
export declare const isPromise: (obj: any) => obj is Promise<any>;
