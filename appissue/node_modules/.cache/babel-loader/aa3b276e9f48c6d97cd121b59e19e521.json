{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar styles_1 = require(\"../../styles\");\n\nvar react_1 = require(\"../../util/react\");\n\nvar Button_1 = require(\"../Button\");\n\nvar Icon_1 = require(\"../Icon\");\n\nvar Popper_1 = require(\"../Popper\");\n\nvar Select_1 = require(\"../Select/Select\");\n\nvar Text_1 = require(\"../Text\");\n\nfunction SelectInline(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      itemToString = props.itemToString,\n      buttonProps = props.buttonProps,\n      popperProps = props.popperProps,\n      defaultButtonText = props.defaultButtonText,\n      rest = __rest(props, [\"value\", \"onChange\", \"itemToString\", \"buttonProps\", \"popperProps\", \"defaultButtonText\"]);\n\n  var theme = styles_1.useTheme();\n  var targetButtonRef = React.useRef();\n  var selectInputRef = React.useRef();\n\n  var renderTarget = function (ctrl) {\n    var _a = buttonProps || {},\n        innerRef = _a.innerRef,\n        buttonRest = __rest(_a, [\"innerRef\"]);\n\n    return React.createElement(Button_1.Button, __assign({\n      onClick: ctrl.toggle,\n      skin: 'ghost',\n      kind: 'normal',\n      size: 'small',\n      innerRef: react_1.composeRefs(targetButtonRef, innerRef)\n    }, buttonRest), React.createElement(Text_1.Text, null, itemToString(value) || defaultButtonText), React.createElement(Icon_1.Icon, {\n      style: {\n        marginLeft: '0.5rem'\n      },\n      icon: ctrl.isShown() ? 'angleUp' : 'angleDown'\n    }));\n  };\n\n  var styles = {\n    box: {\n      border: \"1px solid \" + theme.pallete.divider,\n      backgroundColor: theme.pallete.surface.main,\n      '& > div:first-of-type': {\n        padding: '0.5rem'\n      },\n      'ul > li:first-of-type': {\n        borderTop: \"1px solid \" + theme.pallete.divider\n      },\n      'div > ul': {\n        position: 'static',\n        boxShadow: 'none',\n        border: 'none',\n        borderRadius: 0\n      }\n    },\n    popper: {\n      '[data-visible]': {\n        boxShadow: theme.shadows.outer['40']\n      }\n    }\n  };\n\n  var handleVisibilityEvents = function (ref) {\n    return function (ctrl) {\n      setTimeout(function () {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    };\n  };\n\n  return React.createElement(Popper_1.Popper, __assign({\n    renderTarget: renderTarget,\n    placement: 'bottom-end',\n    style: styles.popper,\n    onHide: handleVisibilityEvents(targetButtonRef),\n    onShow: handleVisibilityEvents(selectInputRef)\n  }, popperProps), function (ctrl) {\n    var handleOnChange = function (newValue) {\n      onChange && onChange(newValue);\n      ctrl.hide();\n    };\n\n    return React.createElement(Select_1.Select, __assign({}, rest, {\n      itemToString: itemToString,\n      onChange: handleOnChange,\n      style: styles.box,\n      inputRef: selectInputRef,\n      isOpen: true\n    }));\n  });\n}\n\nexports.SelectInline = SelectInline;","map":null,"metadata":{},"sourceType":"script"}