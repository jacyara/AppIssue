{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar popper_js_1 = __importDefault(require(\"popper.js\"));\n\nvar react_1 = require(\"react\");\n\nvar defaultOpts = {\n  placement: 'bottom',\n  eventsEnabled: true,\n  positionFixed: false\n};\nvar initialStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  opacity: 0,\n  pointerEvents: 'none'\n};\nvar initialArrowStyle = {};\n\nvar noop = function () {\n  return null;\n};\n\nfunction usePopper(inputOpts, inputs) {\n  if (inputs === void 0) {\n    inputs = [];\n  }\n\n  var opts = __assign({}, defaultOpts, inputOpts);\n\n  var anchorRef = opts.anchorRef,\n      popperRef = opts.popperRef,\n      arrowRef = opts.arrowRef;\n\n  var _a = react_1.useState(function () {\n    return {\n      data: undefined,\n      placement: undefined\n    };\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var popperInstance = react_1.useRef();\n  var callbackFn = react_1.useCallback(function (data) {\n    var placement = data.placement;\n    setState({\n      data: data,\n      placement: placement\n    });\n    return data;\n  }, []);\n  react_1.useEffect(function () {\n    // A placement difference in state means popper determined a new placement\n    // apart from the opts value. By the time the popper element is rendered with\n    // the new position Popper has already measured it, if the place change triggers\n    // a size change it will result in a misaligned popper. So we schedule an update to be sure.\n    if (popperInstance.current) {\n      popperInstance.current.scheduleUpdate();\n    }\n  }, [state.placement]);\n  react_1.useEffect(function () {\n    if (anchorRef.current && popperRef.current) {\n      popperInstance.current = new popper_js_1.default(anchorRef.current, popperRef.current, {\n        placement: opts.placement,\n        eventsEnabled: opts.eventsEnabled,\n        positionFixed: opts.positionFixed,\n        modifiers: __assign({}, opts.modifiers, {\n          arrow: __assign({}, opts.modifiers && opts.modifiers.arrow, {\n            enabled: !!(arrowRef && arrowRef.current),\n            element: arrowRef && arrowRef.current\n          }),\n          applyStyle: {\n            enabled: false\n          },\n          updateStateModifier: {\n            enabled: true,\n            order: 900,\n            fn: callbackFn\n          }\n        })\n      });\n    }\n\n    return function () {\n      if (popperInstance.current) {\n        popperInstance.current.destroy();\n        popperInstance.current = null;\n      }\n    };\n  }, inputs);\n  var style = !popperRef.current || !state.data ? initialStyle : __assign({\n    position: state.data.offsets.popper.position\n  }, state.data.styles);\n  var arrowStyle = !arrowRef || arrowRef.current || !state.data ? initialArrowStyle : state.data.arrowStyles;\n  return {\n    style: style,\n    placement: state.placement,\n    outOfBoundaries: state.data && state.data.hide,\n    scheduleUpdate: popperInstance.current ? popperInstance.current.scheduleUpdate : noop,\n    arrowStyle: arrowStyle\n  };\n}\n\nexports.default = usePopper;","map":null,"metadata":{},"sourceType":"script"}