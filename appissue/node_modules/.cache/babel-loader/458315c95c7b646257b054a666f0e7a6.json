{"ast":null,"code":"\"use strict\"; // From downshift examples\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar downshift_1 = __importDefault(require(\"downshift\"));\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar util_1 = require(\"../../../util\");\n\nvar SelectDownshift_1 = require(\"../SelectSingle/SelectDownshift\");\n\nfunction MultiDownshift(props) {\n  var downshiftRef = react_1.useRef();\n\n  var _a = react_1.useState(props.selectedItems),\n      selectedItems = _a[0],\n      setSelectedItems = _a[1];\n\n  var _b = react_1.useState(false),\n      changed = _b[0],\n      setChanged = _b[1];\n\n  react_1.useEffect(function () {\n    setSelectedItems(props.selectedItems);\n  }, [props.selectedItems]);\n  react_1.useEffect(function () {\n    if (downshiftRef.current && changed) {\n      props.onChange && props.onChange(selectedItems, getStateAndHelpers(downshiftRef.current));\n      props.onSelect && props.onSelect(selectedItems, getStateAndHelpers(downshiftRef.current));\n      setChanged(false);\n    }\n  }, [selectedItems]);\n\n  var isSelected = function (item) {\n    return util_1.some(selectedItems, function (i) {\n      return props.itemIsEqual(i, item);\n    });\n  };\n\n  var handleChange = function (selectedItem) {\n    if (isSelected(selectedItem)) {\n      removeItem(selectedItem);\n    } else {\n      addItem(selectedItem);\n    }\n  };\n\n  var removeItem = function (selectedItem) {\n    setChanged(true);\n    setSelectedItems(function (currentItems) {\n      return currentItems.filter(function (item) {\n        return !props.itemIsEqual(selectedItem, item);\n      });\n    });\n  };\n\n  var addItem = function (item) {\n    setChanged(true);\n\n    if (!isSelected(item)) {\n      setSelectedItems(function (currentItems) {\n        return currentItems.concat([item]);\n      });\n    }\n  };\n\n  var getStateAndHelpers = function (downshift) {\n    downshiftRef.current = downshift;\n    return __assign({}, downshift, {\n      selectedItems: selectedItems,\n      isSelected: isSelected,\n      addItem: addItem,\n      removeItem: removeItem\n    });\n  };\n\n  var children = props.children,\n      onSelect = props.onSelect,\n      rest = __rest(props // TODO: compose together props (rather than overwriting them) like downshift does\n  , [\"children\", \"onSelect\"]); // TODO: compose together props (rather than overwriting them) like downshift does\n\n\n  return react_1.default.createElement(SelectDownshift_1.SelectDownshift, __assign({}, rest, {\n    stateReducer: stateReducer,\n    onChange: handleChange,\n    selectedItem: null\n  }), function (downshift) {\n    return children(getStateAndHelpers(downshift));\n  });\n}\n\nexports.MultiDownshift = MultiDownshift;\nMultiDownshift.defaultProps = {\n  selectedItems: [],\n  itemIsEqual: function (a, b) {\n    if (process.env.NODE_ENV !== 'production') {\n      // tslint:disable no-console\n      console.warn('MultiDownshift: using default itemIsEqual implementation for object comparision.' + ' You should probably provide your own `itemIsEqual` implementation.');\n    }\n\n    return util_1.isEqual(a, b);\n  }\n};\n\nvar stateReducer = function (state, changes) {\n  var inputValue = changes.inputValue,\n      rest = __rest(changes, [\"inputValue\"]);\n\n  switch (changes.type) {\n    case downshift_1.default.stateChangeTypes.changeInput:\n      return __assign({}, rest, {\n        inputValue: inputValue\n      });\n\n    case downshift_1.default.stateChangeTypes.keyDownEnter:\n    case downshift_1.default.stateChangeTypes.clickItem:\n      return __assign({}, rest, {\n        highlightedIndex: state.highlightedIndex,\n        isOpen: true\n      });\n\n    default:\n      return rest;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}