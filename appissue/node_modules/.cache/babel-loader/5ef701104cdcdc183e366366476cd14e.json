{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar Table_1 = require(\"../Table\");\n\nvar TableFilledBody_1 = require(\"./TableFilledBody\");\n\nfunction DataTable(props) {\n  var getColumn = function (columnName) {\n    return props.columns.find(function (col) {\n      return col.name === columnName;\n    });\n  };\n\n  var getHeaderProps = function (column) {\n    var col = typeof column === 'string' ? getColumn(column) : column;\n\n    if (!col) {\n      throw new Error(\"Column '\" + column + \"' not found.\");\n    }\n\n    return {\n      key: col.name,\n      'data-name': col.name,\n      sortable: col.sortable,\n      sortDirection: getSortDirection(col),\n      onSortChange: handleSortChange(col)\n    };\n  };\n\n  var handleSortChange = function (col) {\n    return function (sortDirection, shiftKey) {\n      if (shiftKey) {\n        props.onSortChange(changeSort(props.sort, col.name, sortDirection));\n      } else {\n        props.onSortChange([sortDirection === 'ASC' ? col.name : \"-\" + col.name]);\n      }\n    };\n  };\n\n  var getSortDirection = function (col) {\n    var sorts = props.sort || [];\n    var name = col.name;\n\n    for (var _i = 0, sorts_1 = sorts; _i < sorts_1.length; _i++) {\n      var sort = sorts_1[_i];\n\n      if (sort === name) {\n        return 'ASC';\n      } else if (sort === \"-\" + name) {\n        return 'DESC';\n      }\n    }\n\n    return null;\n  };\n\n  return react_1.default.createElement(react_1.default.Fragment, null, props.render(__assign({}, props, {\n    getHeaderProps: getHeaderProps,\n    getColumn: getColumn\n  })));\n}\n\nexports.DataTable = DataTable;\nDataTable.defaultProps = {\n  loading: false,\n  sort: null,\n  onSortChange: function () {\n    return null;\n  },\n  render: function (renderProps) {\n    return react_1.default.createElement(DataTableDefault, __assign({}, renderProps));\n  },\n  onRowClick: null,\n  hovered: true\n};\n\nfunction DataTableDefault(props) {\n  var columns = props.columns,\n      rows = props.rows,\n      loading = props.loading,\n      onSortChange = props.onSortChange,\n      sort = props.sort,\n      getHeaderProps = props.getHeaderProps,\n      getColumn = props.getColumn,\n      render = props.render,\n      onRowClick = props.onRowClick,\n      rest = __rest(props, [\"columns\", \"rows\", \"loading\", \"onSortChange\", \"sort\", \"getHeaderProps\", \"getColumn\", \"render\", \"onRowClick\"]);\n\n  return react_1.default.createElement(Table_1.Table, __assign({}, rest), react_1.default.createElement(Table_1.TableHead, null, react_1.default.createElement(Table_1.TableRow, null, columns.map(function (col) {\n    return react_1.default.createElement(Table_1.TableHeader, __assign({\n      key: col.name\n    }, getHeaderProps(col)), col.header);\n  }))), react_1.default.createElement(TableFilledBody_1.TableFilledBody, {\n    rows: rows,\n    columns: columns,\n    loading: loading,\n    onRowClick: onRowClick\n  }));\n}\n\nexports.DataTableDefault = DataTableDefault;\n\nvar changeSort = function (sort, name, dir) {\n  var newSort = dir === 'ASC' ? name : \"-\" + name;\n  var swap = false;\n  var newArray = sort.map(function (s) {\n    if (s === name || s === \"-\" + name) {\n      swap = true;\n      return newSort;\n    }\n\n    return s;\n  });\n  return swap ? newArray : newArray.concat([newSort]);\n};","map":null,"metadata":{},"sourceType":"script"}